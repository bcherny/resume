// Generated by CoffeeScript 1.6.3
(function() {
  define(function(require) {
    var BubbleGraph, _;
    _ = require('lodash');
    return BubbleGraph = (function() {
      BubbleGraph.prototype.options = {
        data: {},
        element: document.body
      };

      function BubbleGraph(options) {
        _.extend(this.options, options);
      }

      BubbleGraph.prototype.render = function() {
        var data, days, diff, height, item, last, max, paper, prev, size, spans, time, _i, _len,
          _this = this;
        data = this.options.data;
        size = this.options.element.getBoundingClientRect();
        height = size.height / 3;
        paper = Raphael(this.options.element, size.width, size.height);
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          time = item.when;
          if (time != null) {
            time[0] = strtotime(time[0]);
            time[1] = strtotime(time[1]);
            diff = Math.abs(time[1].getTime() - time[0].getTime());
            days = Math.ceil(diff / (1000 * 3600 * 24));
            item.timespan = days;
          }
        }
        spans = _.pluck(data, 'timespan');
        max = _.max(spans);
        last = data.length - 1;
        prev = {
          r: null,
          x: null,
          y: null
        };
        return _.each(data, function(item, n) {
          var circle, className, r, x, y;
          className = "color" + (n % 5);
          r = size.width * item.timespan / (max * 2 * Math.PI);
          r += max / (5 * r);
          if (prev.x) {
            y = (size.height - height) / 2 - .3 * r + _.random(0, 100);
            x = prev.x + Math.sqrt(Math.abs((y - prev.y) * (y - prev.y) - (r + prev.r) * (r + prev.r)));
          } else {
            x = 20 + r;
            y = size.height - r - 20;
          }
          circle = paper.circle(x, y, r);
          circle.mouseover(function() {
            return _this.over(circle);
          });
          circle.mouseout(function() {
            return _this.out(circle);
          });
          circle.click(function() {
            return _this.click(circle);
          });
          if (n === last) {
            className += ' throb';
          }
          circle.node.setAttribute('class', className);
          circle.node.setAttribute('data-id', n);
          circle.attr({
            opacity: .5,
            stroke: '#fff',
            'stroke-width': 0
          });
          return prev = {
            circle: circle,
            r: r,
            x: x,
            y: y
          };
        });
      };

      return BubbleGraph;

    })();
  });

}).call(this);
