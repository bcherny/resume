// Generated by CoffeeScript 1.6.3
require.config({
  paths: {
    GMaps: '../node_modules/gmaps/gmaps',
    lodash: '../node_modules/lodash/lodash',
    marked: '../node_modules/marked/lib/marked',
    umodel: '../node_modules/umodel/umodel',
    uxhr: '../node_modules/uxhr/uxhr'
  }
});

define(function(require) {
  var GMaps, Resume, log, marked, months, strtotime, umodel, uxhr, _;
  _ = require('lodash');
  GMaps = require('GMaps');
  marked = require('marked');
  umodel = require('umodel');
  uxhr = require('uxhr');
  log = function(message) {
    var time;
    time = +new Date();
    if (!this.time) {
      this.time = time;
    }
    console.log(message, " (" + (time - this.time) + "ms)");
    return this.time = time;
  };
  months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  strtotime = function(string) {
    return new Date(string + '-01T12:00:00');
  };
  return Resume = (function() {
    Resume.prototype.options = {
      name: 'John Smith',
      contact: {},
      element: document.body,
      history: [],
      objective: '',
      skills: [],
      templateHeader: function() {
        var contacts, key, value, _labels, _ref, _template;
        _labels = {
          email: 'Email',
          github: 'Github',
          npm: 'NPM',
          www: 'Web'
        };
        _template = function(type, value) {
          switch (type) {
            case 'email':
              return "mailto:" + value;
            case 'github':
              return "https://github.com/" + value;
            case 'npm':
              return "https://npmjs.org/~" + value;
            case 'www':
              if (value.indexOf('http') !== 0) {
                return "http://" + value;
              } else {
                return value;
              }
          }
        };
        contacts = '';
        _ref = this.contact;
        for (key in _ref) {
          value = _ref[key];
          contacts += "<li><a class=\"" + key + "\" href=\"" + (_template(key, value)) + "\">" + _labels[key] + "</a></li>";
        }
        return "<header>\n	<h1>" + this.name + "'s resume</h1>\n	<ul>" + contacts + "</ul>\n</header>";
      },
      templateCover: function() {
        var skills;
        skills = '<span class="tag">' + this.skills.join('</span><span class="tag">') + '</span>';
        return "<div id=\"cover\">\n	<h3 id=\"objective\">" + (marked(this.objective)) + "</h3>\n	<div id=\"skills\">" + skills + "</div>\n</div>";
      },
      templateHistory: function() {
        return "<div id=\"details\" class=\"hide\">\n	" + this.content + "\n</div>";
      },
      templateHistoryItem: function() {
        var data, fields, from, item, location, map, skills, to, _i, _len;
        from = strtotime(this.when[0]);
        to = strtotime(this.when[1]);
        from = "" + months[from.getMonth()] + " " + (from.getFullYear());
        to = "" + months[to.getMonth()] + " " + (to.getFullYear());
        if (this.location) {
          location = (this.location.city ? "" + this.location.city + "," : '') + ' ' + (this.location.state || '');
        } else {
          location = '';
        }
        skills = '<span class="tag">' + this.skills.join('</span><span class="tag">') + '</span>';
        data = [
          {
            field: 'company',
            value: "**" + this.company + "**"
          }, {
            field: 'title',
            value: this.title
          }, {
            field: 'location',
            value: location
          }, {
            field: 'when',
            value: "" + from + " - " + to
          }, {
            field: 'description',
            value: this.description
          }, {
            field: 'responsibilities',
            value: this.responsibilities
          }, {
            field: 'skills',
            value: skills
          }
        ];
        fields = '';
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          if (item.value != null) {
            fields += "<dt>" + item.field + "</dt><dd>" + (marked(item.value)) + "</dd>";
          }
        }
        map = this.location ? "<span class=\"map-placeholder\">\n	Loading<br />\n	map...\n	<span class=\"spinner\"></span>\n</span>" : '';
        return "<section class=\"detail hide\">\n	" + map + "\n	<dl>\n		" + fields + "\n	</dl>\n</section>";
      },
      apis: {
        github: 'https://api.github.com/users/:user/repos'
      }
    };

    Resume.prototype.model = new umodel({
      active: null
    });

    Resume.prototype.animations = {
      active: Raphael.animation({
        opacity: 1,
        'stroke-width': 5
      }, 200),
      inactive: Raphael.animation({
        opacity: .5,
        'stroke-width': 0
      }, 200),
      over: Raphael.animation({
        opacity: .7
      }, 200),
      out: Raphael.animation({
        opacity: .5
      }, 200)
    };

    function Resume(options) {
      _.extend(this.options, options);
      this.attachEvents();
      this.render();
      this.resize();
    }

    Resume.prototype.attachEvents = function() {
      var _this = this;
      document.addEventListener('click', function(e) {
        return _this.clickBody(e);
      });
      window.addEventListener('resize', function() {
        return _this.resize;
      });
      return window.addEventListener('deviceorientation', function() {
        return _this.resize;
      });
    };

    Resume.prototype.clickBody = function(event) {
      var element, isCircle, isDetails;
      element = event.target;
      isCircle = this.isCircle(element);
      isDetails = this.getDetails(element);
      if (!isCircle && !isDetails) {
        this.deactivate();
        return document.querySelector('svg').classList.remove('small');
      }
    };

    Resume.prototype.isCircle = function(element) {
      return element.tagName === 'circle';
    };

    Resume.prototype.isDetails = function(element) {
      return element.id === 'details';
    };

    Resume.prototype.getDetails = function(element) {
      while (element !== document) {
        if (this.isDetails(element)) {
          return element;
        }
        element = element.parentNode;
      }
    };

    Resume.prototype.render = function() {
      var html, htmlDetails, item, _i, _len, _ref;
      log('rendering...');
      html = '';
      htmlDetails = '';
      html += this.options.templateHeader.call(this.options);
      html += this.options.templateCover.call(this.options);
      _ref = this.options.history;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        htmlDetails += this.options.templateHistoryItem.call(item);
      }
      html += this.options.templateHistory.call({
        content: htmlDetails
      });
      this.options.element.innerHTML = html;
      log('rendered history!');
      this.renderBubbles();
      log('rendered bubbles!');
      this.renderMaps();
      log('rendered maps!');
      this.fetchRepos();
      return log('fetched repos!');
    };

    Resume.prototype.renderBubbles = function() {
      var days, diff, height, history, item, last, max, paper, prev, size, spans, time, _i, _len,
        _this = this;
      history = this.options.history;
      size = this.options.element.getBoundingClientRect();
      height = size.height / 3;
      paper = Raphael(this.options.element, size.width, size.height);
      for (_i = 0, _len = history.length; _i < _len; _i++) {
        item = history[_i];
        time = item.when;
        if (time != null) {
          time[0] = strtotime(time[0]);
          time[1] = strtotime(time[1]);
          diff = Math.abs(time[1].getTime() - time[0].getTime());
          days = Math.ceil(diff / (1000 * 3600 * 24));
          item.timespan = days;
        }
      }
      spans = _.pluck(history, 'timespan');
      max = _.max(spans);
      last = history.length - 1;
      prev = {
        r: null,
        x: null,
        y: null
      };
      return _.each(history, function(item, n) {
        var circle, className, r, x, y;
        className = "color" + (n % 5);
        r = size.width * item.timespan / (max * 2 * Math.PI);
        r += max / (5 * r);
        if (prev.x) {
          y = (size.height - height) / 2 - .3 * r + _.random(0, 100);
          x = prev.x + Math.sqrt(Math.abs((y - prev.y) * (y - prev.y) - (r + prev.r) * (r + prev.r)));
        } else {
          x = 20 + r;
          y = size.height - r - 20;
        }
        circle = paper.circle(x, y, r);
        circle.mouseover(function() {
          return _this.over(circle);
        });
        circle.mouseout(function() {
          return _this.out(circle);
        });
        circle.click(function() {
          return _this.click(circle);
        });
        if (n === last) {
          className += ' throb';
        }
        circle.node.setAttribute('class', className);
        circle.node.setAttribute('data-id', n);
        circle.attr({
          opacity: .5,
          stroke: '#fff',
          'stroke-width': 0
        });
        return prev = {
          circle: circle,
          r: r,
          x: x,
          y: y
        };
      });
    };

    Resume.prototype.renderMaps = function() {
      var circles, details, placeholders, width;
      details = document.querySelector('#details');
      details.classList.remove('hide');
      width = details.offsetWidth - 20;
      details.classList.add('hide');
      placeholders = details.querySelectorAll('.map-placeholder');
      circles = document.querySelectorAll('circle');
      return _.each(this.options.history, function(item, n) {
        var address, img, location, src;
        location = item.location;
        if (location) {
          address = "" + (location.address || '') + " " + (location.city || '') + " " + (location.state || '');
          src = GMaps.staticMapURL({
            address: address,
            markers: [
              {
                color: getComputedStyle(circles[n]).fill,
                address: address
              }
            ],
            size: [width, 150],
            zoom: 9
          });
          img = document.createElement('img');
          img.alt = '';
          img.className = 'map';
          img.src = src;
          return img.onload = function() {
            placeholders[n].classList.add('fade-out');
            return setTimeout(function() {
              placeholders[n].parentNode.replaceChild(img, placeholders[n]);
              return _.defer(function() {
                return img.classList.add('fade-in');
              });
            }, 200);
          };
        }
      });
    };

    Resume.prototype.fetchRepos = function() {
      var api, page, result, uri,
        _this = this;
      api = 'github';
      if ((this.options.contact != null) && (this.options.contact[api] != null)) {
        page = 1;
        result = [];
        uri = this.parseApi(api);
        return _.defer(function() {
          var _check, _fetch;
          if (uri) {
            _check = function(res) {
              res = JSON.parse(res);
              if (res.length) {
                result = result.concat(res);
                return _fetch(++page);
              } else {
                return _this.showRepoCount(result, api);
              }
            };
            _fetch = function(page) {
              return uxhr(uri, {
                page: page
              }, {
                success: _check
              });
            };
            return _fetch(page);
          }
        });
      }
    };

    Resume.prototype.showRepoCount = function(data, api) {
      var count, element, elements, _i, _len, _results;
      count = data.length;
      elements = document.querySelectorAll("." + api);
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        _results.push(element.innerHTML += " (" + count + ")");
      }
      return _results;
    };

    Resume.prototype.parseApi = function(api) {
      var uri;
      if ((this.options.apis != null) && (this.options.apis[api] != null) && (this.options.contact[api] != null)) {
        uri = this.options.apis[api];
        return uri.replace(':user', this.options.contact[api]);
      }
    };

    Resume.prototype.clearThrobber = function() {
      var element;
      element = document.querySelector('.throb');
      if (element) {
        return element.classList.remove('throb');
      }
    };

    Resume.prototype.deactivate = function() {
      var circle, pane,
        _this = this;
      circle = this.model.get('active');
      pane = document.querySelector('.detail.active');
      if (circle) {
        setTimeout(function() {
          var className;
          className = circle.node.className;
          circle.node.className = circle.node.getAttribute('class');
          circle.animate(_this.animations.inactive);
          return circle.transform('s1');
        }, 10);
        this.model.set('active', null);
      }
      if (pane) {
        pane.classList.remove('active');
        setTimeout(function() {
          return pane.classList.add('hide');
        }, .2);
        return document.querySelector('#details').classList.add('hide');
      }
    };

    Resume.prototype.activate = function(element) {
      var classList, className, id;
      className = element.attr('class');
      id = element.node.getAttribute('data-id');
      element.attr('class', "" + className + " active");
      document.querySelector('#details').classList.remove('hide');
      classList = document.querySelectorAll('.detail')[id].classList;
      classList.remove('hide');
      classList.add('active');
      element.toFront().animate(this.animations.active).transform('s1.1');
      document.querySelector('svg').classList.add('small');
      return this.model.set('active', element);
    };

    Resume.prototype.toggle = function(element) {
      if (this.model.get('active') !== element) {
        this.deactivate();
        return this.activate(element);
      } else {
        document.querySelector('svg').classList.remove('small');
        return this.deactivate();
      }
    };

    Resume.prototype.click = function(element) {
      this.clearThrobber();
      return this.toggle(element);
    };

    Resume.prototype.over = function(element) {
      var active;
      active = this.model.get('active');
      if (element !== active) {
        return element.animate(this.animations.over);
      }
    };

    Resume.prototype.out = function(element) {
      var active;
      active = this.model.get('active');
      if (element !== active) {
        return element.animate(this.animations.out);
      }
    };

    Resume.prototype.resize = function() {
      var bin, rotate, rule, scale, sheet, x, y;
      scale = .7;
      rotate = -60;
      x = -28;
      y = -27;
      bin = Math.floor(this.options.element.offsetHeight / 100);
      if (bin < 5) {
        scale = (bin + 1) / 10;
        rotate = -60 + 20 * (5 - bin);
      }
      rule = "svg.small {\n	-webkit-transform: scale(" + scale + ") translate3d(" + x + "%, " + y + "%, 0) rotate(" + rotate + "deg);\n	   -moz-transform: scale(" + scale + ") translate3d(" + x + "%, " + y + "%, 0) rotate(" + rotate + "deg);\n	    -ms-transform: scale(" + scale + ") translate3d(" + x + "%, " + y + "%, 0) rotate(" + rotate + "deg);\n	     -o-transform: scale(" + scale + ") translate3d(" + x + "%, " + y + "%, 0) rotate(" + rotate + "deg);\n	        transform: scale(" + scale + ") translate3d(" + x + "%, " + y + "%, 0) rotate(" + rotate + "deg);\n}";
      sheet = document.styleSheets[0];
      return sheet.insertRule(rule, sheet.cssRules.length);
    };

    return Resume;

  })();
});
