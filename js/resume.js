// Generated by CoffeeScript 1.6.3
require.config({
  paths: {
    lodash: '../node_modules/lodash/lodash',
    marked: '../node_modules/marked/lib/marked',
    GMaps: '../../github/gmaps/gmaps',
    umodel: '../node_modules/umodel/umodel'
  }
});

define(function(require) {
  var GMaps, Resume, marked, months, strtotime, umodel, _;
  _ = require('lodash');
  GMaps = require('GMaps');
  marked = require('marked');
  umodel = require('umodel');
  months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  strtotime = function(string) {
    return new Date(string + '-01T12:00:00');
  };
  return Resume = (function() {
    Resume.prototype.options = {
      contact: {},
      element: document.body,
      history: {},
      name: 'John Smith',
      templateHeader: function() {
        var contacts, key, value, _labels, _ref, _template;
        _labels = {
          email: 'Email',
          github: 'Github',
          npm: 'NPM',
          www: 'Web'
        };
        _template = function(type, value) {
          switch (type) {
            case 'email':
              return "mailto:" + value;
            case 'github':
              return "https://github.com/" + value;
            case 'npm':
              return "https://npmjs.org/~" + value;
            case 'www':
              if (value.indexOf('http') !== 0) {
                return "http://" + value;
              } else {
                return value;
              }
          }
        };
        contacts = '';
        _ref = this.contact;
        for (key in _ref) {
          value = _ref[key];
          contacts += "<li><a class=\"" + key + "\" href=\"" + (_template(key, value)) + "\">" + _labels[key] + "</a></li>";
        }
        return "<header>\n	<h1>" + this.name + "'s resume</h1>\n	<ul>" + contacts + "</ul>\n</header>";
      },
      templateCover: function() {
        var skills;
        skills = '<span class="tag">' + this.skills.join('</span><span class="tag">') + '</span>';
        return "<div id=\"cover\">\n	<h3 id=\"objective\">" + (marked(this.objective)) + "</h3>\n	<div id=\"skills\">" + skills + "</div>\n</div>";
      },
      templateHistory: function() {
        return "<div id=\"details\" class=\"hide\">\n	" + this.content + "\n</div>";
      },
      templateHistoryItem: function() {
        var data, fields, from, item, location, map, skills, to, _i, _len;
        from = strtotime(this.when[0]);
        to = strtotime(this.when[1]);
        from = "" + months[from.getMonth()] + " " + (from.getFullYear());
        to = "" + months[to.getMonth()] + " " + (to.getFullYear());
        if (this.location) {
          location = (this.location.city ? "" + this.location.city + "," : '') + ' ' + (this.location.state || '');
        } else {
          location = '';
        }
        skills = '<span class="tag">' + this.skills.join('</span><span class="tag">') + '</span>';
        data = [
          {
            field: 'company',
            value: "**" + this.company + "**"
          }, {
            field: 'title',
            value: this.title
          }, {
            field: 'location',
            value: location
          }, {
            field: 'when',
            value: "" + from + " - " + to
          }, {
            field: 'description',
            value: this.description
          }, {
            field: 'responsibilities',
            value: this.responsibilities
          }, {
            field: 'skills',
            value: skills
          }
        ];
        fields = '';
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          if (item.value != null) {
            fields += "<dt>" + item.field + "</dt><dd>" + (marked(item.value)) + "</dd>";
          }
        }
        map = this.location ? "<span class=\"map-placeholder\">\n	Loading<br />\n	map...\n	<span class=\"spinner\"></span>\n</span>" : '';
        return "<section class=\"detail hide\">\n	" + map + "\n	<dl>\n		" + fields + "\n	</dl>\n</section>";
      }
    };

    Resume.prototype.model = new umodel({
      active: null
    });

    Resume.prototype.animations = {
      active: Raphael.animation({
        opacity: 1,
        'stroke-width': 5
      }, 200),
      inactive: Raphael.animation({
        opacity: .5,
        'stroke-width': 0
      }, 200),
      over: Raphael.animation({
        opacity: .7
      }, 200),
      out: Raphael.animation({
        opacity: .5
      }, 200)
    };

    Resume.prototype.renderBubbles = function() {
      var accumulator, days, diff, height, history, item, last, max, n, paper, size, spans, time, _i, _len,
        _this = this;
      history = this.options.history;
      height = 150;
      size = this.options.element.getBoundingClientRect();
      paper = Raphael(0, height, size.width, size.height - height);
      for (_i = 0, _len = history.length; _i < _len; _i++) {
        item = history[_i];
        time = item.when;
        if (time != null) {
          time[0] = strtotime(time[0]);
          time[1] = strtotime(time[1]);
          diff = Math.abs(time[1].getTime() - time[0].getTime());
          days = Math.ceil(diff / (1000 * 3600 * 24));
          item.timespan = days;
        }
      }
      spans = _.pluck(history, 'timespan');
      max = _.max(spans);
      n = 0;
      accumulator = 0;
      last = history.length - 1;
      return _.each(history, function(item, n) {
        var circle, className, r, x, y;
        r = size.width * item.timespan / (max * 2 * Math.PI);
        r += max / (5 * r);
        x = accumulator + r + 5 + .2 * r;
        y = !n ? 1.2 * r + 5 : (size.height - height - r) / 2 + .2 * r;
        circle = paper.circle(x, y, r);
        circle.mouseover(function() {
          return _this.over(circle);
        });
        circle.mouseout(function() {
          return _this.out(circle);
        });
        circle.click(function() {
          return _this.click(circle);
        });
        className = "color" + (n % 5);
        if (n === last) {
          className += ' throb';
        }
        circle.node.setAttribute('class', className);
        circle.node.setAttribute('data-id', n);
        circle.attr({
          opacity: .5,
          stroke: '#fff',
          'stroke-width': 0
        });
        return accumulator += 2 * r;
      });
    };

    function Resume(options) {
      _.extend(this.options, options);
      this.attachEvents();
      this.render();
    }

    Resume.prototype.attachEvents = function() {
      var _this = this;
      return document.addEventListener('click', function(e) {
        return _this.clickBody(e);
      });
    };

    Resume.prototype.clickBody = function(event) {
      var element, isCircle, isDetails;
      element = event.target;
      isCircle = this.isCircle(element);
      isDetails = this.getDetails(element);
      if (!isCircle && !isDetails) {
        return this.deactivate();
      }
    };

    Resume.prototype.isCircle = function(element) {
      return element.tagName === 'circle';
    };

    Resume.prototype.isDetails = function(element) {
      return element.id === 'details';
    };

    Resume.prototype.getDetails = function(element) {
      while (element !== document) {
        if (this.isDetails(element)) {
          return element;
        }
        element = element.parentNode;
      }
    };

    Resume.prototype.render = function() {
      var html, htmlDetails, item, _i, _len, _ref;
      html = '';
      htmlDetails = '';
      html += this.options.templateHeader.call(this.options);
      html += this.options.templateCover.call(this.options);
      _ref = this.options.history;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        htmlDetails += this.options.templateHistoryItem.call(item);
      }
      html += this.options.templateHistory.call({
        content: htmlDetails
      });
      this.options.element.innerHTML = html;
      this.renderBubbles();
      return this.renderMaps();
    };

    Resume.prototype.renderMaps = function() {
      var circles, details, placeholders, width;
      details = document.querySelector('#details');
      details.classList.remove('hide');
      width = details.offsetWidth - 20;
      details.classList.add('hide');
      placeholders = details.querySelectorAll('.map-placeholder');
      circles = document.querySelectorAll('circle');
      return _.each(this.options.history, function(item, n) {
        var address, img, location, src;
        location = item.location;
        if (location) {
          address = "" + (location.address || '') + " " + (location.city || '') + " " + (location.state || '');
          src = GMaps.staticMapURL({
            address: address,
            markers: [
              {
                color: getComputedStyle(circles[n]).fill,
                address: address
              }
            ],
            size: [width, 150],
            zoom: 9
          });
          img = document.createElement('img');
          img.alt = '';
          img.className = 'map';
          img.src = src;
          return img.onload = function() {
            placeholders[n].classList.add('fade-out');
            return setTimeout(function() {
              placeholders[n].parentNode.replaceChild(img, placeholders[n]);
              return setTimeout(function() {
                return img.classList.add('fade-in');
              }, 0);
            }, 200);
          };
        }
      });
    };

    Resume.prototype.clearThrobber = function() {
      var element;
      element = document.querySelector('.throb');
      if (element) {
        return element.classList.remove('throb');
      }
    };

    Resume.prototype.deactivate = function() {
      var circle, element, pane;
      circle = document.querySelector('circle.active');
      pane = document.querySelector('.detail.active');
      if (circle) {
        circle.classList.remove('active');
        element = this.model.get('active');
        element.animate(this.animations.inactive);
        element.transform('s1');
        this.model.set('active', null);
      }
      if (pane) {
        pane.classList.remove('active');
        setTimeout(function() {
          return pane.classList.add('hide');
        }, .2);
        document.querySelector('#details').classList.add('hide');
        return document.querySelector('svg').classList.remove('small');
      }
    };

    Resume.prototype.activate = function(element) {
      var classList, id;
      id = element.node.getAttribute('data-id');
      element.node.classList.add('active');
      document.querySelector('#details').classList.remove('hide');
      classList = document.querySelectorAll('.detail')[id].classList;
      classList.remove('hide');
      classList.add('active');
      element.toFront().animate(this.animations.active).transform('s1.1');
      document.querySelector('svg').classList.add('small');
      return this.model.set('active', element);
    };

    Resume.prototype.click = function(element) {
      this.clearThrobber();
      this.deactivate();
      return this.activate(element);
    };

    Resume.prototype.over = function(element) {
      var active;
      active = this.model.get('active');
      if (element !== active) {
        return element.animate(this.animations.over);
      }
    };

    Resume.prototype.out = function(element) {
      var active;
      active = this.model.get('active');
      if (element !== active) {
        return element.animate(this.animations.out);
      }
    };

    Resume.prototype.setElement = function(element) {
      if (element) {
        return this.options.element = element;
      }
    };

    Resume.prototype.setHistory = function(history) {
      if (history) {
        return this.options.history = history;
      }
    };

    return Resume;

  })();
});
